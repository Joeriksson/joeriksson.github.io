<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>J-O Eriksson's blog</title><link>https://joeriksson.io/</link><description>Yet Another PyGuy</description><lastBuildDate>Wed, 25 Sep 2019 11:58:00 +0200</lastBuildDate><item><title>New iPadOS and new, improved Pybites exercise workflow</title><link>https://joeriksson.io/blog/new-ipados-and-new-improved-pybites-exercise-workflow/</link><description>&lt;p&gt;The other day I wrote an article on how I have been working with &lt;a href="https://codechalleng.es/"&gt;Pybite exercises&lt;/a&gt; on my iPad. Since the code editor on the website didn't work well on an iPad (in my case iPad Pro 11") &lt;a href="/blog/how-i-work-with-pybites-exercises-on-my-ipad/"&gt;the workflow I did previously&lt;/a&gt; worked fine but contained a number of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">J-O</dc:creator><pubDate>Wed, 25 Sep 2019 11:58:00 +0200</pubDate><guid isPermaLink="false">tag:joeriksson.io,2019-09-25:/blog/new-ipados-and-new-improved-pybites-exercise-workflow/</guid><category>Python</category><category>PyBites</category><category>Pythonista</category></item><item><title>How I work with PyBites exercises on my iPad</title><link>https://joeriksson.io/blog/how-i-work-with-pybites-exercises-on-my-ipad/</link><description>&lt;p&gt;&lt;strong&gt;Update 2019-09-25:&lt;/strong&gt; &lt;em&gt;With the new iPadOS 13.1 it works very well to do challenges directly on PyBites code challenges website with an external keyboard!! If you're using iPadOS 13.1+ take a look at my &lt;a href="/blog/new-ipados-and-new-improved-pybites-exercise-workflow/"&gt;new workflow&lt;/a&gt; instead.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2019-09-22:&lt;/strong&gt; &lt;em&gt;The workflow in this article assumes that you have …&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">J-O</dc:creator><pubDate>Sat, 21 Sep 2019 11:40:00 +0200</pubDate><guid isPermaLink="false">tag:joeriksson.io,2019-09-21:/blog/how-i-work-with-pybites-exercises-on-my-ipad/</guid><category>Python</category><category>PyBites</category><category>Pythonista</category></item><item><title>Pieces of Py #5 Slice me up</title><link>https://joeriksson.io/blog/Slice-me-up/</link><description>&lt;p&gt;In my learnings of Python I came to know that there is something called slicing. Given a sequence that you want to get certain sub-elements from, you can more easily get the results you want with slicing, instead of e.g. making a couple of for-loops.&lt;/p&gt;
&lt;p&gt;Lets start with taking …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">J-O</dc:creator><pubDate>Tue, 17 Sep 2019 05:21:00 +0200</pubDate><guid isPermaLink="false">tag:joeriksson.io,2019-09-17:/blog/Slice-me-up/</guid><category>Python</category><category>Pieces of Py</category><category>Slicing</category></item><item><title>Pieces of Py #4 Using itertools.groupby</title><link>https://joeriksson.io/blog/Using-itertools-groupby/</link><description>&lt;p&gt;During some of the exercises I did on my first round of &lt;a href="https://twitter.com/_100DaysOfCode" target="_blank"&gt;#100DaysOfCode&lt;/a&gt; there was a need to group an iterable by a certain field in the data structure. I found out, that was a function called groupby in the built-in itertools library that can be used for it. &lt;/p&gt;
&lt;p&gt;In …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">J-O</dc:creator><pubDate>Sun, 01 Sep 2019 17:53:00 +0200</pubDate><guid isPermaLink="false">tag:joeriksson.io,2019-09-01:/blog/Using-itertools-groupby/</guid><category>Python</category><category>Pieces of Py</category><category>Itertools</category></item><item><title>Code Journal R2D5 100 Days of Code 2019-08-30</title><link>https://joeriksson.io/blog/code-journal-r2d5-100-days-of-code-2019-08-30/</link><description>&lt;p&gt;The first couple of days of this second round of &lt;a href="https://www.100daysofcode.com"&gt;#100DaysOfCode&lt;/a&gt; I went through almost all the Flask tutorials in &lt;a href="https://training.talkpython.fm/courses/details/100-days-of-web-in-python"&gt;#100DaysOfWeb in Python)&lt;/a&gt; . They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flask Intro&lt;/li&gt;
&lt;li&gt;Calling APIs in Flask&lt;/li&gt;
&lt;li&gt;Flask Login&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an extension to that I wanted to build my own app from scratch, in a way …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">J-O</dc:creator><pubDate>Fri, 30 Aug 2019 15:09:00 +0200</pubDate><guid isPermaLink="false">tag:joeriksson.io,2019-08-30:/blog/code-journal-r2d5-100-days-of-code-2019-08-30/</guid><category>Python</category><category>Code Journal</category><category>Flask</category></item><item><title>Pieces of Py #3 Clean up data from csv and save to json in a simple way with pandas</title><link>https://joeriksson.io/blog/Clean-up-data-from-csv-and-save-to-json-in-a-simple-way-with-pandas/</link><description>&lt;p&gt;At work I once had to take a csv file that was exported from a large list in SharePoint, clean it up a bit and export it to a JSON format for importing in to a data layer. The csv file contained all columns in the SharePoint list, which was …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">J-O</dc:creator><pubDate>Mon, 05 Aug 2019 10:02:00 +0200</pubDate><guid isPermaLink="false">tag:joeriksson.io,2019-08-05:/blog/Clean-up-data-from-csv-and-save-to-json-in-a-simple-way-with-pandas/</guid><category>Python</category><category>Pieces of Py</category><category>Pandas</category><category>CSV</category><category>JSON</category></item><item><title>How I set up and work with this website</title><link>https://joeriksson.io/blog/How-I-set-up-and-work-with-this-website/</link><description>&lt;p&gt;In this article I will go through how I set up this website. What my workflow looks like, updating content and configurations. Also how I set up a staging environment and a production environment with automatic builds and deployment. And how I can do almost anything from any of my …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">J-O</dc:creator><pubDate>Sat, 03 Aug 2019 12:38:00 +0200</pubDate><guid isPermaLink="false">tag:joeriksson.io,2019-08-03:/blog/How-I-set-up-and-work-with-this-website/</guid><category>Python</category><category>Pelican</category><category>This website</category><category>CircleCI</category><category>Netlify</category></item><item><title>Pieces of Py #2: Use a dictionary instead of multiple if-statements</title><link>https://joeriksson.io/blog/Use-a-dictionary-instead-of-multiple-if-statements/</link><description>&lt;p&gt;One thing I learned during my first &lt;a href="https://twitter.com/_100DaysOfCode" target="_blank"&gt;#100DaysOfCode&lt;/a&gt; was to use a dict instead of numerous if-statements. In my opinion it can make the code much more readable among other things. Here I'll try to make an example where this concept could fit in.&lt;/p&gt;
&lt;p&gt;In this example we create a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">J-O</dc:creator><pubDate>Thu, 01 Aug 2019 09:38:00 +0200</pubDate><guid isPermaLink="false">tag:joeriksson.io,2019-08-01:/blog/Use-a-dictionary-instead-of-multiple-if-statements/</guid><category>Python</category><category>Pieces of Py</category><category>Dictionary</category><category>Lambda</category><category>Functools</category></item><item><title>Pieces of Py #1: Decorator with arguments</title><link>https://joeriksson.io/blog/Decorator-with-arguments/</link><description>&lt;p&gt;This post is a simple example which explains how to create a decorator function that accepts and uses argument(s). A decorator that would accept an argument could look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@mydecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_argument&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_decorated_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A simple scenario could be that you would like to print something …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">J-O</dc:creator><pubDate>Tue, 09 Jul 2019 21:49:00 +0200</pubDate><guid isPermaLink="false">tag:joeriksson.io,2019-07-09:/blog/Decorator-with-arguments/</guid><category>Python</category><category>Pieces of Py</category><category>Decorator</category></item></channel></rss>